// <auto-generated />
using System;
using DonkeyGameAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DonkeyGameAPI.Migrations
{
    [DbContext(typeof(DonkeyGameContext))]
    partial class DonkeyGameContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DonkeyGameAPI.Models.Card", b =>
                {
                    b.Property<int>("CardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Name");

                    b.Property<int?>("PlayerStateID")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("Value");

                    b.HasKey("CardID");

                    b.HasIndex("PlayerStateID");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("DonkeyGameAPI.Models.Game", b =>
                {
                    b.Property<int>("GameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GameID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameID"), 1L, 1);

                    b.Property<DateTime?>("DateOfStart")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfStart");

                    b.Property<string>("GameCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("GameCode");

                    b.Property<int>("GameOwnerUserID")
                        .HasColumnType("int");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit")
                        .HasColumnName("IsFinished");

                    b.Property<int?>("LoserPlayerUserID")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerOnTheMoveUserID")
                        .HasColumnType("int");

                    b.HasKey("GameID");

                    b.HasIndex("GameOwnerUserID");

                    b.HasIndex("LoserPlayerUserID");

                    b.HasIndex("PlayerOnTheMoveUserID");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("DonkeyGameAPI.Models.PlayerState", b =>
                {
                    b.Property<int>("PlayerStateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlayerStateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerStateID"), 1L, 1);

                    b.Property<int?>("GameID")
                        .HasColumnType("int");

                    b.Property<bool>("HasSpecialCard")
                        .HasColumnType("bit")
                        .HasColumnName("HasSpecialCard");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("Points");

                    b.Property<int>("TurnsPassedWithSpecialCard")
                        .HasColumnType("int")
                        .HasColumnName("TurnsPassedWithSpecialCard");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PlayerStateID");

                    b.HasIndex("GameID");

                    b.HasIndex("UserID");

                    b.ToTable("PlayerState");
                });

            modelBuilder.Entity("DonkeyGameAPI.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Password");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Token");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("UserName");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DonkeyGameAPI.Models.Card", b =>
                {
                    b.HasOne("DonkeyGameAPI.Models.PlayerState", null)
                        .WithMany("Cards")
                        .HasForeignKey("PlayerStateID");
                });

            modelBuilder.Entity("DonkeyGameAPI.Models.Game", b =>
                {
                    b.HasOne("DonkeyGameAPI.Models.User", "GameOwner")
                        .WithMany()
                        .HasForeignKey("GameOwnerUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonkeyGameAPI.Models.User", "LoserPlayer")
                        .WithMany()
                        .HasForeignKey("LoserPlayerUserID");

                    b.HasOne("DonkeyGameAPI.Models.User", "PlayerOnTheMove")
                        .WithMany()
                        .HasForeignKey("PlayerOnTheMoveUserID");

                    b.Navigation("GameOwner");

                    b.Navigation("LoserPlayer");

                    b.Navigation("PlayerOnTheMove");
                });

            modelBuilder.Entity("DonkeyGameAPI.Models.PlayerState", b =>
                {
                    b.HasOne("DonkeyGameAPI.Models.Game", null)
                        .WithMany("Players")
                        .HasForeignKey("GameID");

                    b.HasOne("DonkeyGameAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DonkeyGameAPI.Models.Game", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("DonkeyGameAPI.Models.PlayerState", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
